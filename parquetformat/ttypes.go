// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package parquetformat

import (
	"bytes"
	"fmt"
	"github.com/kostya-sh/parquet-go/parquetformat/internal/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

//Types supported by Parquet.  These types are intended to be used in combination
//with the encodings to control the on disk storage format.
//For example INT16 is not included as a type since a good encoding of INT32
//would handle this.
type Type int64

const (
	Type_BOOLEAN              Type = 0
	Type_INT32                Type = 1
	Type_INT64                Type = 2
	Type_INT96                Type = 3
	Type_FLOAT                Type = 4
	Type_DOUBLE               Type = 5
	Type_BYTE_ARRAY           Type = 6
	Type_FIXED_LEN_BYTE_ARRAY Type = 7
)

func (p Type) String() string {
	switch p {
	case Type_BOOLEAN:
		return "BOOLEAN"
	case Type_INT32:
		return "INT32"
	case Type_INT64:
		return "INT64"
	case Type_INT96:
		return "INT96"
	case Type_FLOAT:
		return "FLOAT"
	case Type_DOUBLE:
		return "DOUBLE"
	case Type_BYTE_ARRAY:
		return "BYTE_ARRAY"
	case Type_FIXED_LEN_BYTE_ARRAY:
		return "FIXED_LEN_BYTE_ARRAY"
	}
	return "<UNSET>"
}

func TypeFromString(s string) (Type, error) {
	switch s {
	case "BOOLEAN":
		return Type_BOOLEAN, nil
	case "INT32":
		return Type_INT32, nil
	case "INT64":
		return Type_INT64, nil
	case "INT96":
		return Type_INT96, nil
	case "FLOAT":
		return Type_FLOAT, nil
	case "DOUBLE":
		return Type_DOUBLE, nil
	case "BYTE_ARRAY":
		return Type_BYTE_ARRAY, nil
	case "FIXED_LEN_BYTE_ARRAY":
		return Type_FIXED_LEN_BYTE_ARRAY, nil
	}
	return Type(0), fmt.Errorf("not a valid Type string")
}

func TypePtr(v Type) *Type { return &v }

func (p Type) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Type) UnmarshalText(text []byte) error {
	q, err := TypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//Common types used by frameworks(e.g. hive, pig) using parquet.  This helps map
//between types in those frameworks to the base types in parquet.  This is only
//metadata and not needed to read or write the data.
type ConvertedType int64

const (
	ConvertedType_UTF8             ConvertedType = 0
	ConvertedType_MAP              ConvertedType = 1
	ConvertedType_MAP_KEY_VALUE    ConvertedType = 2
	ConvertedType_LIST             ConvertedType = 3
	ConvertedType_ENUM             ConvertedType = 4
	ConvertedType_DECIMAL          ConvertedType = 5
	ConvertedType_DATE             ConvertedType = 6
	ConvertedType_TIME_MILLIS      ConvertedType = 7
	ConvertedType_TIME_MICROS      ConvertedType = 8
	ConvertedType_TIMESTAMP_MILLIS ConvertedType = 9
	ConvertedType_TIMESTAMP_MICROS ConvertedType = 10
	ConvertedType_UINT_8           ConvertedType = 11
	ConvertedType_UINT_16          ConvertedType = 12
	ConvertedType_UINT_32          ConvertedType = 13
	ConvertedType_UINT_64          ConvertedType = 14
	ConvertedType_INT_8            ConvertedType = 15
	ConvertedType_INT_16           ConvertedType = 16
	ConvertedType_INT_32           ConvertedType = 17
	ConvertedType_INT_64           ConvertedType = 18
	ConvertedType_JSON             ConvertedType = 19
	ConvertedType_BSON             ConvertedType = 20
	ConvertedType_INTERVAL         ConvertedType = 21
)

func (p ConvertedType) String() string {
	switch p {
	case ConvertedType_UTF8:
		return "UTF8"
	case ConvertedType_MAP:
		return "MAP"
	case ConvertedType_MAP_KEY_VALUE:
		return "MAP_KEY_VALUE"
	case ConvertedType_LIST:
		return "LIST"
	case ConvertedType_ENUM:
		return "ENUM"
	case ConvertedType_DECIMAL:
		return "DECIMAL"
	case ConvertedType_DATE:
		return "DATE"
	case ConvertedType_TIME_MILLIS:
		return "TIME_MILLIS"
	case ConvertedType_TIME_MICROS:
		return "TIME_MICROS"
	case ConvertedType_TIMESTAMP_MILLIS:
		return "TIMESTAMP_MILLIS"
	case ConvertedType_TIMESTAMP_MICROS:
		return "TIMESTAMP_MICROS"
	case ConvertedType_UINT_8:
		return "UINT_8"
	case ConvertedType_UINT_16:
		return "UINT_16"
	case ConvertedType_UINT_32:
		return "UINT_32"
	case ConvertedType_UINT_64:
		return "UINT_64"
	case ConvertedType_INT_8:
		return "INT_8"
	case ConvertedType_INT_16:
		return "INT_16"
	case ConvertedType_INT_32:
		return "INT_32"
	case ConvertedType_INT_64:
		return "INT_64"
	case ConvertedType_JSON:
		return "JSON"
	case ConvertedType_BSON:
		return "BSON"
	case ConvertedType_INTERVAL:
		return "INTERVAL"
	}
	return "<UNSET>"
}

func ConvertedTypeFromString(s string) (ConvertedType, error) {
	switch s {
	case "UTF8":
		return ConvertedType_UTF8, nil
	case "MAP":
		return ConvertedType_MAP, nil
	case "MAP_KEY_VALUE":
		return ConvertedType_MAP_KEY_VALUE, nil
	case "LIST":
		return ConvertedType_LIST, nil
	case "ENUM":
		return ConvertedType_ENUM, nil
	case "DECIMAL":
		return ConvertedType_DECIMAL, nil
	case "DATE":
		return ConvertedType_DATE, nil
	case "TIME_MILLIS":
		return ConvertedType_TIME_MILLIS, nil
	case "TIME_MICROS":
		return ConvertedType_TIME_MICROS, nil
	case "TIMESTAMP_MILLIS":
		return ConvertedType_TIMESTAMP_MILLIS, nil
	case "TIMESTAMP_MICROS":
		return ConvertedType_TIMESTAMP_MICROS, nil
	case "UINT_8":
		return ConvertedType_UINT_8, nil
	case "UINT_16":
		return ConvertedType_UINT_16, nil
	case "UINT_32":
		return ConvertedType_UINT_32, nil
	case "UINT_64":
		return ConvertedType_UINT_64, nil
	case "INT_8":
		return ConvertedType_INT_8, nil
	case "INT_16":
		return ConvertedType_INT_16, nil
	case "INT_32":
		return ConvertedType_INT_32, nil
	case "INT_64":
		return ConvertedType_INT_64, nil
	case "JSON":
		return ConvertedType_JSON, nil
	case "BSON":
		return ConvertedType_BSON, nil
	case "INTERVAL":
		return ConvertedType_INTERVAL, nil
	}
	return ConvertedType(0), fmt.Errorf("not a valid ConvertedType string")
}

func ConvertedTypePtr(v ConvertedType) *ConvertedType { return &v }

func (p ConvertedType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ConvertedType) UnmarshalText(text []byte) error {
	q, err := ConvertedTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//Representation of Schemas
type FieldRepetitionType int64

const (
	FieldRepetitionType_REQUIRED FieldRepetitionType = 0
	FieldRepetitionType_OPTIONAL FieldRepetitionType = 1
	FieldRepetitionType_REPEATED FieldRepetitionType = 2
)

func (p FieldRepetitionType) String() string {
	switch p {
	case FieldRepetitionType_REQUIRED:
		return "REQUIRED"
	case FieldRepetitionType_OPTIONAL:
		return "OPTIONAL"
	case FieldRepetitionType_REPEATED:
		return "REPEATED"
	}
	return "<UNSET>"
}

func FieldRepetitionTypeFromString(s string) (FieldRepetitionType, error) {
	switch s {
	case "REQUIRED":
		return FieldRepetitionType_REQUIRED, nil
	case "OPTIONAL":
		return FieldRepetitionType_OPTIONAL, nil
	case "REPEATED":
		return FieldRepetitionType_REPEATED, nil
	}
	return FieldRepetitionType(0), fmt.Errorf("not a valid FieldRepetitionType string")
}

func FieldRepetitionTypePtr(v FieldRepetitionType) *FieldRepetitionType { return &v }

func (p FieldRepetitionType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *FieldRepetitionType) UnmarshalText(text []byte) error {
	q, err := FieldRepetitionTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//Encodings supported by Parquet.  Not all encodings are valid for all types.  These
//enums are also used to specify the encoding of definition and repetition levels.
//See the accompanying doc for the details of the more complicated encodings.
type Encoding int64

const (
	Encoding_PLAIN                   Encoding = 0
	Encoding_PLAIN_DICTIONARY        Encoding = 2
	Encoding_RLE                     Encoding = 3
	Encoding_BIT_PACKED              Encoding = 4
	Encoding_DELTA_BINARY_PACKED     Encoding = 5
	Encoding_DELTA_LENGTH_BYTE_ARRAY Encoding = 6
	Encoding_DELTA_BYTE_ARRAY        Encoding = 7
	Encoding_RLE_DICTIONARY          Encoding = 8
)

func (p Encoding) String() string {
	switch p {
	case Encoding_PLAIN:
		return "PLAIN"
	case Encoding_PLAIN_DICTIONARY:
		return "PLAIN_DICTIONARY"
	case Encoding_RLE:
		return "RLE"
	case Encoding_BIT_PACKED:
		return "BIT_PACKED"
	case Encoding_DELTA_BINARY_PACKED:
		return "DELTA_BINARY_PACKED"
	case Encoding_DELTA_LENGTH_BYTE_ARRAY:
		return "DELTA_LENGTH_BYTE_ARRAY"
	case Encoding_DELTA_BYTE_ARRAY:
		return "DELTA_BYTE_ARRAY"
	case Encoding_RLE_DICTIONARY:
		return "RLE_DICTIONARY"
	}
	return "<UNSET>"
}

func EncodingFromString(s string) (Encoding, error) {
	switch s {
	case "PLAIN":
		return Encoding_PLAIN, nil
	case "PLAIN_DICTIONARY":
		return Encoding_PLAIN_DICTIONARY, nil
	case "RLE":
		return Encoding_RLE, nil
	case "BIT_PACKED":
		return Encoding_BIT_PACKED, nil
	case "DELTA_BINARY_PACKED":
		return Encoding_DELTA_BINARY_PACKED, nil
	case "DELTA_LENGTH_BYTE_ARRAY":
		return Encoding_DELTA_LENGTH_BYTE_ARRAY, nil
	case "DELTA_BYTE_ARRAY":
		return Encoding_DELTA_BYTE_ARRAY, nil
	case "RLE_DICTIONARY":
		return Encoding_RLE_DICTIONARY, nil
	}
	return Encoding(0), fmt.Errorf("not a valid Encoding string")
}

func EncodingPtr(v Encoding) *Encoding { return &v }

func (p Encoding) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Encoding) UnmarshalText(text []byte) error {
	q, err := EncodingFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

//Supported compression algorithms.
type CompressionCodec int64

const (
	CompressionCodec_UNCOMPRESSED CompressionCodec = 0
	CompressionCodec_SNAPPY       CompressionCodec = 1
	CompressionCodec_GZIP         CompressionCodec = 2
	CompressionCodec_LZO          CompressionCodec = 3
)

func (p CompressionCodec) String() string {
	switch p {
	case CompressionCodec_UNCOMPRESSED:
		return "UNCOMPRESSED"
	case CompressionCodec_SNAPPY:
		return "SNAPPY"
	case CompressionCodec_GZIP:
		return "GZIP"
	case CompressionCodec_LZO:
		return "LZO"
	}
	return "<UNSET>"
}

func CompressionCodecFromString(s string) (CompressionCodec, error) {
	switch s {
	case "UNCOMPRESSED":
		return CompressionCodec_UNCOMPRESSED, nil
	case "SNAPPY":
		return CompressionCodec_SNAPPY, nil
	case "GZIP":
		return CompressionCodec_GZIP, nil
	case "LZO":
		return CompressionCodec_LZO, nil
	}
	return CompressionCodec(0), fmt.Errorf("not a valid CompressionCodec string")
}

func CompressionCodecPtr(v CompressionCodec) *CompressionCodec { return &v }

func (p CompressionCodec) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CompressionCodec) UnmarshalText(text []byte) error {
	q, err := CompressionCodecFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type PageType int64

const (
	PageType_DATA_PAGE       PageType = 0
	PageType_INDEX_PAGE      PageType = 1
	PageType_DICTIONARY_PAGE PageType = 2
	PageType_DATA_PAGE_V2    PageType = 3
)

func (p PageType) String() string {
	switch p {
	case PageType_DATA_PAGE:
		return "DATA_PAGE"
	case PageType_INDEX_PAGE:
		return "INDEX_PAGE"
	case PageType_DICTIONARY_PAGE:
		return "DICTIONARY_PAGE"
	case PageType_DATA_PAGE_V2:
		return "DATA_PAGE_V2"
	}
	return "<UNSET>"
}

func PageTypeFromString(s string) (PageType, error) {
	switch s {
	case "DATA_PAGE":
		return PageType_DATA_PAGE, nil
	case "INDEX_PAGE":
		return PageType_INDEX_PAGE, nil
	case "DICTIONARY_PAGE":
		return PageType_DICTIONARY_PAGE, nil
	case "DATA_PAGE_V2":
		return PageType_DATA_PAGE_V2, nil
	}
	return PageType(0), fmt.Errorf("not a valid PageType string")
}

func PageTypePtr(v PageType) *PageType { return &v }

func (p PageType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *PageType) UnmarshalText(text []byte) error {
	q, err := PageTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Statistics per row group and per page
// All fields are optional.
//
// Attributes:
//  - Max: min and max value of the column, encoded in PLAIN encoding
//  - Min
//  - NullCount: count of null value in the column
//  - DistinctCount: count of distinct values occurring
type Statistics struct {
	Max           []byte `thrift:"max,1" json:"max,omitempty"`
	Min           []byte `thrift:"min,2" json:"min,omitempty"`
	NullCount     *int64 `thrift:"null_count,3" json:"null_count,omitempty"`
	DistinctCount *int64 `thrift:"distinct_count,4" json:"distinct_count,omitempty"`
}

func NewStatistics() *Statistics {
	return &Statistics{}
}

var Statistics_Max_DEFAULT []byte

func (p *Statistics) GetMax() []byte {
	return p.Max
}

var Statistics_Min_DEFAULT []byte

func (p *Statistics) GetMin() []byte {
	return p.Min
}

var Statistics_NullCount_DEFAULT int64

func (p *Statistics) GetNullCount() int64 {
	if !p.IsSetNullCount() {
		return Statistics_NullCount_DEFAULT
	}
	return *p.NullCount
}

var Statistics_DistinctCount_DEFAULT int64

func (p *Statistics) GetDistinctCount() int64 {
	if !p.IsSetDistinctCount() {
		return Statistics_DistinctCount_DEFAULT
	}
	return *p.DistinctCount
}
func (p *Statistics) IsSetMax() bool {
	return p.Max != nil
}

func (p *Statistics) IsSetMin() bool {
	return p.Min != nil
}

func (p *Statistics) IsSetNullCount() bool {
	return p.NullCount != nil
}

func (p *Statistics) IsSetDistinctCount() bool {
	return p.DistinctCount != nil
}

func (p *Statistics) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Statistics) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Max = v
	}
	return nil
}

func (p *Statistics) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Min = v
	}
	return nil
}

func (p *Statistics) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NullCount = &v
	}
	return nil
}

func (p *Statistics) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.DistinctCount = &v
	}
	return nil
}

func (p *Statistics) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Statistics"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Statistics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMax() {
		if err := oprot.WriteFieldBegin("max", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:max: ", p), err)
		}
		if err := oprot.WriteBinary(p.Max); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.max (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:max: ", p), err)
		}
	}
	return err
}

func (p *Statistics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMin() {
		if err := oprot.WriteFieldBegin("min", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:min: ", p), err)
		}
		if err := oprot.WriteBinary(p.Min); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.min (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:min: ", p), err)
		}
	}
	return err
}

func (p *Statistics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNullCount() {
		if err := oprot.WriteFieldBegin("null_count", thrift.I64, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:null_count: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.NullCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.null_count (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:null_count: ", p), err)
		}
	}
	return err
}

func (p *Statistics) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDistinctCount() {
		if err := oprot.WriteFieldBegin("distinct_count", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:distinct_count: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.DistinctCount)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.distinct_count (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:distinct_count: ", p), err)
		}
	}
	return err
}

func (p *Statistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Statistics(%+v)", *p)
}

// Represents a element inside a schema definition.
//  - if it is a group (inner node) then type is undefined and num_children is defined
//  - if it is a primitive type (leaf) then type is defined and num_children is undefined
// the nodes are listed in depth first traversal order.
//
// Attributes:
//  - Type: Data type for this field. Not set if the current element is a non-leaf node
//  - TypeLength: If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the vales.
// Otherwise, if specified, this is the maximum bit length to store any of the values.
// (e.g. a low cardinality INT col could have this set to 3).  Note that this is
// in the schema, and therefore fixed for the entire file.
//  - RepetitionType: repetition of the field. The root of the schema does not have a repetition_type.
// All other nodes must have one
//  - Name: Name of the field in the schema
//  - NumChildren: Nested fields.  Since thrift does not support nested fields,
// the nesting is flattened to a single list by a depth-first traversal.
// The children count is used to construct the nested relationship.
// This field is not set when the element is a primitive type
//  - ConvertedType: When the schema is the result of a conversion from another model
// Used to record the original type to help with cross conversion.
//  - Scale: Used when this column contains decimal data.
// See the DECIMAL converted type for more details.
//  - Precision
//  - FieldID: When the original schema supports field ids, this will save the
// original field id in the parquet schema
type SchemaElement struct {
	Type           *Type                `thrift:"type,1" json:"type,omitempty"`
	TypeLength     *int32               `thrift:"type_length,2" json:"type_length,omitempty"`
	RepetitionType *FieldRepetitionType `thrift:"repetition_type,3" json:"repetition_type,omitempty"`
	Name           string               `thrift:"name,4,required" json:"name"`
	NumChildren    *int32               `thrift:"num_children,5" json:"num_children,omitempty"`
	ConvertedType  *ConvertedType       `thrift:"converted_type,6" json:"converted_type,omitempty"`
	Scale          *int32               `thrift:"scale,7" json:"scale,omitempty"`
	Precision      *int32               `thrift:"precision,8" json:"precision,omitempty"`
	FieldID        *int32               `thrift:"field_id,9" json:"field_id,omitempty"`
}

func NewSchemaElement() *SchemaElement {
	return &SchemaElement{}
}

var SchemaElement_Type_DEFAULT Type

func (p *SchemaElement) GetType() Type {
	if !p.IsSetType() {
		return SchemaElement_Type_DEFAULT
	}
	return *p.Type
}

var SchemaElement_TypeLength_DEFAULT int32

func (p *SchemaElement) GetTypeLength() int32 {
	if !p.IsSetTypeLength() {
		return SchemaElement_TypeLength_DEFAULT
	}
	return *p.TypeLength
}

var SchemaElement_RepetitionType_DEFAULT FieldRepetitionType

func (p *SchemaElement) GetRepetitionType() FieldRepetitionType {
	if !p.IsSetRepetitionType() {
		return SchemaElement_RepetitionType_DEFAULT
	}
	return *p.RepetitionType
}

func (p *SchemaElement) GetName() string {
	return p.Name
}

var SchemaElement_NumChildren_DEFAULT int32

func (p *SchemaElement) GetNumChildren() int32 {
	if !p.IsSetNumChildren() {
		return SchemaElement_NumChildren_DEFAULT
	}
	return *p.NumChildren
}

var SchemaElement_ConvertedType_DEFAULT ConvertedType

func (p *SchemaElement) GetConvertedType() ConvertedType {
	if !p.IsSetConvertedType() {
		return SchemaElement_ConvertedType_DEFAULT
	}
	return *p.ConvertedType
}

var SchemaElement_Scale_DEFAULT int32

func (p *SchemaElement) GetScale() int32 {
	if !p.IsSetScale() {
		return SchemaElement_Scale_DEFAULT
	}
	return *p.Scale
}

var SchemaElement_Precision_DEFAULT int32

func (p *SchemaElement) GetPrecision() int32 {
	if !p.IsSetPrecision() {
		return SchemaElement_Precision_DEFAULT
	}
	return *p.Precision
}

var SchemaElement_FieldID_DEFAULT int32

func (p *SchemaElement) GetFieldID() int32 {
	if !p.IsSetFieldID() {
		return SchemaElement_FieldID_DEFAULT
	}
	return *p.FieldID
}
func (p *SchemaElement) IsSetType() bool {
	return p.Type != nil
}

func (p *SchemaElement) IsSetTypeLength() bool {
	return p.TypeLength != nil
}

func (p *SchemaElement) IsSetRepetitionType() bool {
	return p.RepetitionType != nil
}

func (p *SchemaElement) IsSetNumChildren() bool {
	return p.NumChildren != nil
}

func (p *SchemaElement) IsSetConvertedType() bool {
	return p.ConvertedType != nil
}

func (p *SchemaElement) IsSetScale() bool {
	return p.Scale != nil
}

func (p *SchemaElement) IsSetPrecision() bool {
	return p.Precision != nil
}

func (p *SchemaElement) IsSetFieldID() bool {
	return p.FieldID != nil
}

func (p *SchemaElement) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetName = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"))
	}
	return nil
}

func (p *SchemaElement) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Type(v)
		p.Type = &temp
	}
	return nil
}

func (p *SchemaElement) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TypeLength = &v
	}
	return nil
}

func (p *SchemaElement) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := FieldRepetitionType(v)
		p.RepetitionType = &temp
	}
	return nil
}

func (p *SchemaElement) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *SchemaElement) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NumChildren = &v
	}
	return nil
}

func (p *SchemaElement) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := ConvertedType(v)
		p.ConvertedType = &temp
	}
	return nil
}

func (p *SchemaElement) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Scale = &v
	}
	return nil
}

func (p *SchemaElement) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Precision = &v
	}
	return nil
}

func (p *SchemaElement) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.FieldID = &v
	}
	return nil
}

func (p *SchemaElement) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SchemaElement"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SchemaElement) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
		}
	}
	return err
}

func (p *SchemaElement) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeLength() {
		if err := oprot.WriteFieldBegin("type_length", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type_length: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TypeLength)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.type_length (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type_length: ", p), err)
		}
	}
	return err
}

func (p *SchemaElement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepetitionType() {
		if err := oprot.WriteFieldBegin("repetition_type", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:repetition_type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RepetitionType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.repetition_type (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:repetition_type: ", p), err)
		}
	}
	return err
}

func (p *SchemaElement) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:name: ", p), err)
	}
	return err
}

func (p *SchemaElement) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNumChildren() {
		if err := oprot.WriteFieldBegin("num_children", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_children: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.NumChildren)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.num_children (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_children: ", p), err)
		}
	}
	return err
}

func (p *SchemaElement) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetConvertedType() {
		if err := oprot.WriteFieldBegin("converted_type", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:converted_type: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ConvertedType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.converted_type (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:converted_type: ", p), err)
		}
	}
	return err
}

func (p *SchemaElement) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetScale() {
		if err := oprot.WriteFieldBegin("scale", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:scale: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Scale)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scale (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:scale: ", p), err)
		}
	}
	return err
}

func (p *SchemaElement) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrecision() {
		if err := oprot.WriteFieldBegin("precision", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:precision: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Precision)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.precision (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:precision: ", p), err)
		}
	}
	return err
}

func (p *SchemaElement) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldID() {
		if err := oprot.WriteFieldBegin("field_id", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:field_id: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.FieldID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.field_id (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:field_id: ", p), err)
		}
	}
	return err
}

func (p *SchemaElement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchemaElement(%+v)", *p)
}

// Data page header
//
// Attributes:
//  - NumValues: Number of values, including NULLs, in this data page. *
//  - Encoding: Encoding used for this data page *
//  - DefinitionLevelEncoding: Encoding used for definition levels *
//  - RepetitionLevelEncoding: Encoding used for repetition levels *
//  - Statistics: Optional statistics for the data in this page*
type DataPageHeader struct {
	NumValues               int32       `thrift:"num_values,1,required" json:"num_values"`
	Encoding                Encoding    `thrift:"encoding,2,required" json:"encoding"`
	DefinitionLevelEncoding Encoding    `thrift:"definition_level_encoding,3,required" json:"definition_level_encoding"`
	RepetitionLevelEncoding Encoding    `thrift:"repetition_level_encoding,4,required" json:"repetition_level_encoding"`
	Statistics              *Statistics `thrift:"statistics,5" json:"statistics,omitempty"`
}

func NewDataPageHeader() *DataPageHeader {
	return &DataPageHeader{}
}

func (p *DataPageHeader) GetNumValues() int32 {
	return p.NumValues
}

func (p *DataPageHeader) GetEncoding() Encoding {
	return p.Encoding
}

func (p *DataPageHeader) GetDefinitionLevelEncoding() Encoding {
	return p.DefinitionLevelEncoding
}

func (p *DataPageHeader) GetRepetitionLevelEncoding() Encoding {
	return p.RepetitionLevelEncoding
}

var DataPageHeader_Statistics_DEFAULT *Statistics

func (p *DataPageHeader) GetStatistics() *Statistics {
	if !p.IsSetStatistics() {
		return DataPageHeader_Statistics_DEFAULT
	}
	return p.Statistics
}
func (p *DataPageHeader) IsSetStatistics() bool {
	return p.Statistics != nil
}

func (p *DataPageHeader) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNumValues bool = false
	var issetEncoding bool = false
	var issetDefinitionLevelEncoding bool = false
	var issetRepetitionLevelEncoding bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetNumValues = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetEncoding = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetDefinitionLevelEncoding = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetRepetitionLevelEncoding = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNumValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumValues is not set"))
	}
	if !issetEncoding {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Encoding is not set"))
	}
	if !issetDefinitionLevelEncoding {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DefinitionLevelEncoding is not set"))
	}
	if !issetRepetitionLevelEncoding {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RepetitionLevelEncoding is not set"))
	}
	return nil
}

func (p *DataPageHeader) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumValues = v
	}
	return nil
}

func (p *DataPageHeader) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Encoding(v)
		p.Encoding = temp
	}
	return nil
}

func (p *DataPageHeader) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := Encoding(v)
		p.DefinitionLevelEncoding = temp
	}
	return nil
}

func (p *DataPageHeader) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := Encoding(v)
		p.RepetitionLevelEncoding = temp
	}
	return nil
}

func (p *DataPageHeader) readField5(iprot thrift.TProtocol) error {
	p.Statistics = &Statistics{}
	if err := p.Statistics.read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Statistics), err)
	}
	return nil
}

func (p *DataPageHeader) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DataPageHeader"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DataPageHeader) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_values", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_values: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumValues)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_values (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_values: ", p), err)
	}
	return err
}

func (p *DataPageHeader) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("encoding", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoding: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Encoding)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.encoding (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoding: ", p), err)
	}
	return err
}

func (p *DataPageHeader) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("definition_level_encoding", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:definition_level_encoding: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DefinitionLevelEncoding)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.definition_level_encoding (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:definition_level_encoding: ", p), err)
	}
	return err
}

func (p *DataPageHeader) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repetition_level_encoding", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:repetition_level_encoding: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RepetitionLevelEncoding)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.repetition_level_encoding (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:repetition_level_encoding: ", p), err)
	}
	return err
}

func (p *DataPageHeader) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatistics() {
		if err := oprot.WriteFieldBegin("statistics", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:statistics: ", p), err)
		}
		if err := p.Statistics.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Statistics), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:statistics: ", p), err)
		}
	}
	return err
}

func (p *DataPageHeader) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataPageHeader(%+v)", *p)
}

type IndexPageHeader struct {
}

func NewIndexPageHeader() *IndexPageHeader {
	return &IndexPageHeader{}
}

func (p *IndexPageHeader) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IndexPageHeader) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IndexPageHeader"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IndexPageHeader) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IndexPageHeader(%+v)", *p)
}

// TODO: *
//
// Attributes:
//  - NumValues: Number of values in the dictionary *
//  - Encoding: Encoding using this dictionary page *
//  - IsSorted: If true, the entries in the dictionary are sorted in ascending order *
type DictionaryPageHeader struct {
	NumValues int32    `thrift:"num_values,1,required" json:"num_values"`
	Encoding  Encoding `thrift:"encoding,2,required" json:"encoding"`
	IsSorted  *bool    `thrift:"is_sorted,3" json:"is_sorted,omitempty"`
}

func NewDictionaryPageHeader() *DictionaryPageHeader {
	return &DictionaryPageHeader{}
}

func (p *DictionaryPageHeader) GetNumValues() int32 {
	return p.NumValues
}

func (p *DictionaryPageHeader) GetEncoding() Encoding {
	return p.Encoding
}

var DictionaryPageHeader_IsSorted_DEFAULT bool

func (p *DictionaryPageHeader) GetIsSorted() bool {
	if !p.IsSetIsSorted() {
		return DictionaryPageHeader_IsSorted_DEFAULT
	}
	return *p.IsSorted
}
func (p *DictionaryPageHeader) IsSetIsSorted() bool {
	return p.IsSorted != nil
}

func (p *DictionaryPageHeader) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNumValues bool = false
	var issetEncoding bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetNumValues = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetEncoding = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNumValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumValues is not set"))
	}
	if !issetEncoding {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Encoding is not set"))
	}
	return nil
}

func (p *DictionaryPageHeader) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumValues = v
	}
	return nil
}

func (p *DictionaryPageHeader) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Encoding(v)
		p.Encoding = temp
	}
	return nil
}

func (p *DictionaryPageHeader) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsSorted = &v
	}
	return nil
}

func (p *DictionaryPageHeader) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DictionaryPageHeader"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DictionaryPageHeader) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_values", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_values: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumValues)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_values (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_values: ", p), err)
	}
	return err
}

func (p *DictionaryPageHeader) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("encoding", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoding: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Encoding)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.encoding (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoding: ", p), err)
	}
	return err
}

func (p *DictionaryPageHeader) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSorted() {
		if err := oprot.WriteFieldBegin("is_sorted", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:is_sorted: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsSorted)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.is_sorted (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:is_sorted: ", p), err)
		}
	}
	return err
}

func (p *DictionaryPageHeader) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DictionaryPageHeader(%+v)", *p)
}

// New page format alowing reading levels without decompressing the data
// Repetition and definition levels are uncompressed
// The remaining section containing the data is compressed if is_compressed is true
//
//
// Attributes:
//  - NumValues: Number of values, including NULLs, in this data page. *
//  - NumNulls: Number of NULL values, in this data page.
// Number of non-null = num_values - num_nulls which is also the number of values in the data section *
//  - NumRows: Number of rows in this data page. which means pages change on record boundaries (r = 0) *
//  - Encoding: Encoding used for data in this page *
//  - DefinitionLevelsByteLength: length of the repetition levels
//  - RepetitionLevelsByteLength: length of the definition levels
//  - IsCompressed: whether the values are compressed.
// Which means the section of the page between
// definition_levels_byte_length + repetition_levels_byte_length + 1 and compressed_page_size (included)
// is compressed with the compression_codec.
// If missing it is considered compressed
//  - Statistics: optional statistics for this column chunk
type DataPageHeaderV2 struct {
	NumValues                  int32       `thrift:"num_values,1,required" json:"num_values"`
	NumNulls                   int32       `thrift:"num_nulls,2,required" json:"num_nulls"`
	NumRows                    int32       `thrift:"num_rows,3,required" json:"num_rows"`
	Encoding                   Encoding    `thrift:"encoding,4,required" json:"encoding"`
	DefinitionLevelsByteLength int32       `thrift:"definition_levels_byte_length,5,required" json:"definition_levels_byte_length"`
	RepetitionLevelsByteLength int32       `thrift:"repetition_levels_byte_length,6,required" json:"repetition_levels_byte_length"`
	IsCompressed               bool        `thrift:"is_compressed,7" json:"is_compressed,omitempty"`
	Statistics                 *Statistics `thrift:"statistics,8" json:"statistics,omitempty"`
}

func NewDataPageHeaderV2() *DataPageHeaderV2 {
	return &DataPageHeaderV2{
		IsCompressed: true,
	}
}

func (p *DataPageHeaderV2) GetNumValues() int32 {
	return p.NumValues
}

func (p *DataPageHeaderV2) GetNumNulls() int32 {
	return p.NumNulls
}

func (p *DataPageHeaderV2) GetNumRows() int32 {
	return p.NumRows
}

func (p *DataPageHeaderV2) GetEncoding() Encoding {
	return p.Encoding
}

func (p *DataPageHeaderV2) GetDefinitionLevelsByteLength() int32 {
	return p.DefinitionLevelsByteLength
}

func (p *DataPageHeaderV2) GetRepetitionLevelsByteLength() int32 {
	return p.RepetitionLevelsByteLength
}

var DataPageHeaderV2_IsCompressed_DEFAULT bool = true

func (p *DataPageHeaderV2) GetIsCompressed() bool {
	return p.IsCompressed
}

var DataPageHeaderV2_Statistics_DEFAULT *Statistics

func (p *DataPageHeaderV2) GetStatistics() *Statistics {
	if !p.IsSetStatistics() {
		return DataPageHeaderV2_Statistics_DEFAULT
	}
	return p.Statistics
}
func (p *DataPageHeaderV2) IsSetIsCompressed() bool {
	return p.IsCompressed != DataPageHeaderV2_IsCompressed_DEFAULT
}

func (p *DataPageHeaderV2) IsSetStatistics() bool {
	return p.Statistics != nil
}

func (p *DataPageHeaderV2) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetNumValues bool = false
	var issetNumNulls bool = false
	var issetNumRows bool = false
	var issetEncoding bool = false
	var issetDefinitionLevelsByteLength bool = false
	var issetRepetitionLevelsByteLength bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetNumValues = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetNumNulls = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetNumRows = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetEncoding = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetDefinitionLevelsByteLength = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetRepetitionLevelsByteLength = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetNumValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumValues is not set"))
	}
	if !issetNumNulls {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumNulls is not set"))
	}
	if !issetNumRows {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumRows is not set"))
	}
	if !issetEncoding {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Encoding is not set"))
	}
	if !issetDefinitionLevelsByteLength {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DefinitionLevelsByteLength is not set"))
	}
	if !issetRepetitionLevelsByteLength {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RepetitionLevelsByteLength is not set"))
	}
	return nil
}

func (p *DataPageHeaderV2) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.NumValues = v
	}
	return nil
}

func (p *DataPageHeaderV2) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.NumNulls = v
	}
	return nil
}

func (p *DataPageHeaderV2) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumRows = v
	}
	return nil
}

func (p *DataPageHeaderV2) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := Encoding(v)
		p.Encoding = temp
	}
	return nil
}

func (p *DataPageHeaderV2) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.DefinitionLevelsByteLength = v
	}
	return nil
}

func (p *DataPageHeaderV2) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.RepetitionLevelsByteLength = v
	}
	return nil
}

func (p *DataPageHeaderV2) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.IsCompressed = v
	}
	return nil
}

func (p *DataPageHeaderV2) readField8(iprot thrift.TProtocol) error {
	p.Statistics = &Statistics{}
	if err := p.Statistics.read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Statistics), err)
	}
	return nil
}

func (p *DataPageHeaderV2) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DataPageHeaderV2"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DataPageHeaderV2) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_values", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_values: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumValues)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_values (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_values: ", p), err)
	}
	return err
}

func (p *DataPageHeaderV2) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_nulls", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_nulls: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumNulls)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_nulls (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_nulls: ", p), err)
	}
	return err
}

func (p *DataPageHeaderV2) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_rows", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_rows: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.NumRows)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_rows (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_rows: ", p), err)
	}
	return err
}

func (p *DataPageHeaderV2) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("encoding", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:encoding: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Encoding)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.encoding (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:encoding: ", p), err)
	}
	return err
}

func (p *DataPageHeaderV2) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("definition_levels_byte_length", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:definition_levels_byte_length: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.DefinitionLevelsByteLength)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.definition_levels_byte_length (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:definition_levels_byte_length: ", p), err)
	}
	return err
}

func (p *DataPageHeaderV2) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("repetition_levels_byte_length", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:repetition_levels_byte_length: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.RepetitionLevelsByteLength)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.repetition_levels_byte_length (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:repetition_levels_byte_length: ", p), err)
	}
	return err
}

func (p *DataPageHeaderV2) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsCompressed() {
		if err := oprot.WriteFieldBegin("is_compressed", thrift.BOOL, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:is_compressed: ", p), err)
		}
		if err := oprot.WriteBool(bool(p.IsCompressed)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.is_compressed (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:is_compressed: ", p), err)
		}
	}
	return err
}

func (p *DataPageHeaderV2) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatistics() {
		if err := oprot.WriteFieldBegin("statistics", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:statistics: ", p), err)
		}
		if err := p.Statistics.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Statistics), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:statistics: ", p), err)
		}
	}
	return err
}

func (p *DataPageHeaderV2) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DataPageHeaderV2(%+v)", *p)
}

// Attributes:
//  - Type: the type of the page: indicates which of the *_header fields is set *
//  - UncompressedPageSize: Uncompressed page size in bytes (not including this header) *
//  - CompressedPageSize: Compressed page size in bytes (not including this header) *
//  - Crc: 32bit crc for the data below. This allows for disabling checksumming in HDFS
// if only a few pages needs to be read
//
//  - DataPageHeader
//  - IndexPageHeader
//  - DictionaryPageHeader
//  - DataPageHeaderV2
type PageHeader struct {
	Type                 PageType              `thrift:"type,1,required" json:"type"`
	UncompressedPageSize int32                 `thrift:"uncompressed_page_size,2,required" json:"uncompressed_page_size"`
	CompressedPageSize   int32                 `thrift:"compressed_page_size,3,required" json:"compressed_page_size"`
	Crc                  *int32                `thrift:"crc,4" json:"crc,omitempty"`
	DataPageHeader       *DataPageHeader       `thrift:"data_page_header,5" json:"data_page_header,omitempty"`
	IndexPageHeader      *IndexPageHeader      `thrift:"index_page_header,6" json:"index_page_header,omitempty"`
	DictionaryPageHeader *DictionaryPageHeader `thrift:"dictionary_page_header,7" json:"dictionary_page_header,omitempty"`
	DataPageHeaderV2     *DataPageHeaderV2     `thrift:"data_page_header_v2,8" json:"data_page_header_v2,omitempty"`
}

func NewPageHeader() *PageHeader {
	return &PageHeader{}
}

func (p *PageHeader) GetType() PageType {
	return p.Type
}

func (p *PageHeader) GetUncompressedPageSize() int32 {
	return p.UncompressedPageSize
}

func (p *PageHeader) GetCompressedPageSize() int32 {
	return p.CompressedPageSize
}

var PageHeader_Crc_DEFAULT int32

func (p *PageHeader) GetCrc() int32 {
	if !p.IsSetCrc() {
		return PageHeader_Crc_DEFAULT
	}
	return *p.Crc
}

var PageHeader_DataPageHeader_DEFAULT *DataPageHeader

func (p *PageHeader) GetDataPageHeader() *DataPageHeader {
	if !p.IsSetDataPageHeader() {
		return PageHeader_DataPageHeader_DEFAULT
	}
	return p.DataPageHeader
}

var PageHeader_IndexPageHeader_DEFAULT *IndexPageHeader

func (p *PageHeader) GetIndexPageHeader() *IndexPageHeader {
	if !p.IsSetIndexPageHeader() {
		return PageHeader_IndexPageHeader_DEFAULT
	}
	return p.IndexPageHeader
}

var PageHeader_DictionaryPageHeader_DEFAULT *DictionaryPageHeader

func (p *PageHeader) GetDictionaryPageHeader() *DictionaryPageHeader {
	if !p.IsSetDictionaryPageHeader() {
		return PageHeader_DictionaryPageHeader_DEFAULT
	}
	return p.DictionaryPageHeader
}

var PageHeader_DataPageHeaderV2_DEFAULT *DataPageHeaderV2

func (p *PageHeader) GetDataPageHeaderV2() *DataPageHeaderV2 {
	if !p.IsSetDataPageHeaderV2() {
		return PageHeader_DataPageHeaderV2_DEFAULT
	}
	return p.DataPageHeaderV2
}
func (p *PageHeader) IsSetCrc() bool {
	return p.Crc != nil
}

func (p *PageHeader) IsSetDataPageHeader() bool {
	return p.DataPageHeader != nil
}

func (p *PageHeader) IsSetIndexPageHeader() bool {
	return p.IndexPageHeader != nil
}

func (p *PageHeader) IsSetDictionaryPageHeader() bool {
	return p.DictionaryPageHeader != nil
}

func (p *PageHeader) IsSetDataPageHeaderV2() bool {
	return p.DataPageHeaderV2 != nil
}

func (p *PageHeader) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetType bool = false
	var issetUncompressedPageSize bool = false
	var issetCompressedPageSize bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetType = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetUncompressedPageSize = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetCompressedPageSize = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetUncompressedPageSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UncompressedPageSize is not set"))
	}
	if !issetCompressedPageSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CompressedPageSize is not set"))
	}
	return nil
}

func (p *PageHeader) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := PageType(v)
		p.Type = temp
	}
	return nil
}

func (p *PageHeader) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.UncompressedPageSize = v
	}
	return nil
}

func (p *PageHeader) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.CompressedPageSize = v
	}
	return nil
}

func (p *PageHeader) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Crc = &v
	}
	return nil
}

func (p *PageHeader) readField5(iprot thrift.TProtocol) error {
	p.DataPageHeader = &DataPageHeader{}
	if err := p.DataPageHeader.read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DataPageHeader), err)
	}
	return nil
}

func (p *PageHeader) readField6(iprot thrift.TProtocol) error {
	p.IndexPageHeader = &IndexPageHeader{}
	if err := p.IndexPageHeader.read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IndexPageHeader), err)
	}
	return nil
}

func (p *PageHeader) readField7(iprot thrift.TProtocol) error {
	p.DictionaryPageHeader = &DictionaryPageHeader{}
	if err := p.DictionaryPageHeader.read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DictionaryPageHeader), err)
	}
	return nil
}

func (p *PageHeader) readField8(iprot thrift.TProtocol) error {
	p.DataPageHeaderV2 = &DataPageHeaderV2{
		IsCompressed: true,
	}
	if err := p.DataPageHeaderV2.read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DataPageHeaderV2), err)
	}
	return nil
}

func (p *PageHeader) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PageHeader"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PageHeader) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *PageHeader) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uncompressed_page_size", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uncompressed_page_size: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.UncompressedPageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.uncompressed_page_size (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uncompressed_page_size: ", p), err)
	}
	return err
}

func (p *PageHeader) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compressed_page_size", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:compressed_page_size: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.CompressedPageSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.compressed_page_size (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:compressed_page_size: ", p), err)
	}
	return err
}

func (p *PageHeader) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCrc() {
		if err := oprot.WriteFieldBegin("crc", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:crc: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Crc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.crc (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:crc: ", p), err)
		}
	}
	return err
}

func (p *PageHeader) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataPageHeader() {
		if err := oprot.WriteFieldBegin("data_page_header", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:data_page_header: ", p), err)
		}
		if err := p.DataPageHeader.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DataPageHeader), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:data_page_header: ", p), err)
		}
	}
	return err
}

func (p *PageHeader) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexPageHeader() {
		if err := oprot.WriteFieldBegin("index_page_header", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:index_page_header: ", p), err)
		}
		if err := p.IndexPageHeader.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IndexPageHeader), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:index_page_header: ", p), err)
		}
	}
	return err
}

func (p *PageHeader) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDictionaryPageHeader() {
		if err := oprot.WriteFieldBegin("dictionary_page_header", thrift.STRUCT, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dictionary_page_header: ", p), err)
		}
		if err := p.DictionaryPageHeader.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DictionaryPageHeader), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dictionary_page_header: ", p), err)
		}
	}
	return err
}

func (p *PageHeader) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataPageHeaderV2() {
		if err := oprot.WriteFieldBegin("data_page_header_v2", thrift.STRUCT, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:data_page_header_v2: ", p), err)
		}
		if err := p.DataPageHeaderV2.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DataPageHeaderV2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:data_page_header_v2: ", p), err)
		}
	}
	return err
}

func (p *PageHeader) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PageHeader(%+v)", *p)
}

// Wrapper struct to store key values
//
// Attributes:
//  - Key
//  - Value
type KeyValue struct {
	Key   string  `thrift:"key,1,required" json:"key"`
	Value *string `thrift:"value,2" json:"value,omitempty"`
}

func NewKeyValue() *KeyValue {
	return &KeyValue{}
}

func (p *KeyValue) GetKey() string {
	return p.Key
}

var KeyValue_Value_DEFAULT string

func (p *KeyValue) GetValue() string {
	if !p.IsSetValue() {
		return KeyValue_Value_DEFAULT
	}
	return *p.Value
}
func (p *KeyValue) IsSetValue() bool {
	return p.Value != nil
}

func (p *KeyValue) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetKey bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetKey = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetKey {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Key is not set"))
	}
	return nil
}

func (p *KeyValue) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *KeyValue) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = &v
	}
	return nil
}

func (p *KeyValue) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KeyValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeyValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *KeyValue) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Value)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
		}
	}
	return err
}

func (p *KeyValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyValue(%+v)", *p)
}

// Wrapper struct to specify sort order
//
// Attributes:
//  - ColumnIdx: The column index (in this row group) *
//  - Descending: If true, indicates this column is sorted in descending order. *
//  - NullsFirst: If true, nulls will come before non-null values, otherwise,
// nulls go at the end.
type SortingColumn struct {
	ColumnIdx  int32 `thrift:"column_idx,1,required" json:"column_idx"`
	Descending bool  `thrift:"descending,2,required" json:"descending"`
	NullsFirst bool  `thrift:"nulls_first,3,required" json:"nulls_first"`
}

func NewSortingColumn() *SortingColumn {
	return &SortingColumn{}
}

func (p *SortingColumn) GetColumnIdx() int32 {
	return p.ColumnIdx
}

func (p *SortingColumn) GetDescending() bool {
	return p.Descending
}

func (p *SortingColumn) GetNullsFirst() bool {
	return p.NullsFirst
}
func (p *SortingColumn) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetColumnIdx bool = false
	var issetDescending bool = false
	var issetNullsFirst bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetColumnIdx = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetDescending = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetNullsFirst = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetColumnIdx {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ColumnIdx is not set"))
	}
	if !issetDescending {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Descending is not set"))
	}
	if !issetNullsFirst {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NullsFirst is not set"))
	}
	return nil
}

func (p *SortingColumn) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ColumnIdx = v
	}
	return nil
}

func (p *SortingColumn) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Descending = v
	}
	return nil
}

func (p *SortingColumn) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NullsFirst = v
	}
	return nil
}

func (p *SortingColumn) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SortingColumn"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SortingColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column_idx", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:column_idx: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ColumnIdx)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.column_idx (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:column_idx: ", p), err)
	}
	return err
}

func (p *SortingColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("descending", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:descending: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Descending)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.descending (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:descending: ", p), err)
	}
	return err
}

func (p *SortingColumn) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nulls_first", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nulls_first: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.NullsFirst)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.nulls_first (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nulls_first: ", p), err)
	}
	return err
}

func (p *SortingColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SortingColumn(%+v)", *p)
}

// statistics of a given page type and encoding
//
// Attributes:
//  - PageType: the page type (data/dic/...) *
//  - Encoding: encoding of the page *
//  - Count: number of pages of this type with this encoding *
type PageEncodingStats struct {
	PageType PageType `thrift:"page_type,1,required" json:"page_type"`
	Encoding Encoding `thrift:"encoding,2,required" json:"encoding"`
	Count    int32    `thrift:"count,3,required" json:"count"`
}

func NewPageEncodingStats() *PageEncodingStats {
	return &PageEncodingStats{}
}

func (p *PageEncodingStats) GetPageType() PageType {
	return p.PageType
}

func (p *PageEncodingStats) GetEncoding() Encoding {
	return p.Encoding
}

func (p *PageEncodingStats) GetCount() int32 {
	return p.Count
}
func (p *PageEncodingStats) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetPageType bool = false
	var issetEncoding bool = false
	var issetCount bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetPageType = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetEncoding = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetCount = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetPageType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PageType is not set"))
	}
	if !issetEncoding {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Encoding is not set"))
	}
	if !issetCount {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Count is not set"))
	}
	return nil
}

func (p *PageEncodingStats) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := PageType(v)
		p.PageType = temp
	}
	return nil
}

func (p *PageEncodingStats) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := Encoding(v)
		p.Encoding = temp
	}
	return nil
}

func (p *PageEncodingStats) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Count = v
	}
	return nil
}

func (p *PageEncodingStats) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PageEncodingStats"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *PageEncodingStats) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("page_type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:page_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.PageType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.page_type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:page_type: ", p), err)
	}
	return err
}

func (p *PageEncodingStats) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("encoding", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encoding: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Encoding)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.encoding (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encoding: ", p), err)
	}
	return err
}

func (p *PageEncodingStats) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Count)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err)
	}
	return err
}

func (p *PageEncodingStats) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PageEncodingStats(%+v)", *p)
}

// Description for column metadata
//
// Attributes:
//  - Type: Type of this column *
//  - Encodings: Set of all encodings used for this column. The purpose is to validate
// whether we can decode those pages. *
//  - PathInSchema: Path in schema *
//  - Codec: Compression codec *
//  - NumValues: Number of values in this column *
//  - TotalUncompressedSize: total byte size of all uncompressed pages in this column chunk (including the headers) *
//  - TotalCompressedSize: total byte size of all compressed pages in this column chunk (including the headers) *
//  - KeyValueMetadata: Optional key/value metadata *
//  - DataPageOffset: Byte offset from beginning of file to first data page *
//  - IndexPageOffset: Byte offset from beginning of file to root index page *
//  - DictionaryPageOffset: Byte offset from the beginning of file to first (only) dictionary page *
//  - Statistics: optional statistics for this column chunk
//  - EncodingStats: Set of all encodings used for pages in this column chunk.
// This information can be used to determine if all data pages are
// dictionary encoded for example *
type ColumnMetaData struct {
	Type                  Type                 `thrift:"type,1,required" json:"type"`
	Encodings             []Encoding           `thrift:"encodings,2,required" json:"encodings"`
	PathInSchema          []string             `thrift:"path_in_schema,3,required" json:"path_in_schema"`
	Codec                 CompressionCodec     `thrift:"codec,4,required" json:"codec"`
	NumValues             int64                `thrift:"num_values,5,required" json:"num_values"`
	TotalUncompressedSize int64                `thrift:"total_uncompressed_size,6,required" json:"total_uncompressed_size"`
	TotalCompressedSize   int64                `thrift:"total_compressed_size,7,required" json:"total_compressed_size"`
	KeyValueMetadata      []*KeyValue          `thrift:"key_value_metadata,8" json:"key_value_metadata,omitempty"`
	DataPageOffset        int64                `thrift:"data_page_offset,9,required" json:"data_page_offset"`
	IndexPageOffset       *int64               `thrift:"index_page_offset,10" json:"index_page_offset,omitempty"`
	DictionaryPageOffset  *int64               `thrift:"dictionary_page_offset,11" json:"dictionary_page_offset,omitempty"`
	Statistics            *Statistics          `thrift:"statistics,12" json:"statistics,omitempty"`
	EncodingStats         []*PageEncodingStats `thrift:"encoding_stats,13" json:"encoding_stats,omitempty"`
}

func NewColumnMetaData() *ColumnMetaData {
	return &ColumnMetaData{}
}

func (p *ColumnMetaData) GetType() Type {
	return p.Type
}

func (p *ColumnMetaData) GetEncodings() []Encoding {
	return p.Encodings
}

func (p *ColumnMetaData) GetPathInSchema() []string {
	return p.PathInSchema
}

func (p *ColumnMetaData) GetCodec() CompressionCodec {
	return p.Codec
}

func (p *ColumnMetaData) GetNumValues() int64 {
	return p.NumValues
}

func (p *ColumnMetaData) GetTotalUncompressedSize() int64 {
	return p.TotalUncompressedSize
}

func (p *ColumnMetaData) GetTotalCompressedSize() int64 {
	return p.TotalCompressedSize
}

var ColumnMetaData_KeyValueMetadata_DEFAULT []*KeyValue

func (p *ColumnMetaData) GetKeyValueMetadata() []*KeyValue {
	return p.KeyValueMetadata
}

func (p *ColumnMetaData) GetDataPageOffset() int64 {
	return p.DataPageOffset
}

var ColumnMetaData_IndexPageOffset_DEFAULT int64

func (p *ColumnMetaData) GetIndexPageOffset() int64 {
	if !p.IsSetIndexPageOffset() {
		return ColumnMetaData_IndexPageOffset_DEFAULT
	}
	return *p.IndexPageOffset
}

var ColumnMetaData_DictionaryPageOffset_DEFAULT int64

func (p *ColumnMetaData) GetDictionaryPageOffset() int64 {
	if !p.IsSetDictionaryPageOffset() {
		return ColumnMetaData_DictionaryPageOffset_DEFAULT
	}
	return *p.DictionaryPageOffset
}

var ColumnMetaData_Statistics_DEFAULT *Statistics

func (p *ColumnMetaData) GetStatistics() *Statistics {
	if !p.IsSetStatistics() {
		return ColumnMetaData_Statistics_DEFAULT
	}
	return p.Statistics
}

var ColumnMetaData_EncodingStats_DEFAULT []*PageEncodingStats

func (p *ColumnMetaData) GetEncodingStats() []*PageEncodingStats {
	return p.EncodingStats
}
func (p *ColumnMetaData) IsSetKeyValueMetadata() bool {
	return p.KeyValueMetadata != nil
}

func (p *ColumnMetaData) IsSetIndexPageOffset() bool {
	return p.IndexPageOffset != nil
}

func (p *ColumnMetaData) IsSetDictionaryPageOffset() bool {
	return p.DictionaryPageOffset != nil
}

func (p *ColumnMetaData) IsSetStatistics() bool {
	return p.Statistics != nil
}

func (p *ColumnMetaData) IsSetEncodingStats() bool {
	return p.EncodingStats != nil
}

func (p *ColumnMetaData) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetType bool = false
	var issetEncodings bool = false
	var issetPathInSchema bool = false
	var issetCodec bool = false
	var issetNumValues bool = false
	var issetTotalUncompressedSize bool = false
	var issetTotalCompressedSize bool = false
	var issetDataPageOffset bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetType = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetEncodings = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetPathInSchema = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetCodec = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
			issetNumValues = true
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetTotalUncompressedSize = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
			issetTotalCompressedSize = true
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetDataPageOffset = true
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"))
	}
	if !issetEncodings {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Encodings is not set"))
	}
	if !issetPathInSchema {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PathInSchema is not set"))
	}
	if !issetCodec {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Codec is not set"))
	}
	if !issetNumValues {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumValues is not set"))
	}
	if !issetTotalUncompressedSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalUncompressedSize is not set"))
	}
	if !issetTotalCompressedSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalCompressedSize is not set"))
	}
	if !issetDataPageOffset {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataPageOffset is not set"))
	}
	return nil
}

func (p *ColumnMetaData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Type(v)
		p.Type = temp
	}
	return nil
}

func (p *ColumnMetaData) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]Encoding, 0, size)
	p.Encodings = tSlice
	for i := 0; i < size; i++ {
		var _elem0 Encoding
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := Encoding(v)
			_elem0 = temp
		}
		p.Encodings = append(p.Encodings, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ColumnMetaData) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.PathInSchema = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.PathInSchema = append(p.PathInSchema, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ColumnMetaData) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := CompressionCodec(v)
		p.Codec = temp
	}
	return nil
}

func (p *ColumnMetaData) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.NumValues = v
	}
	return nil
}

func (p *ColumnMetaData) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.TotalUncompressedSize = v
	}
	return nil
}

func (p *ColumnMetaData) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.TotalCompressedSize = v
	}
	return nil
}

func (p *ColumnMetaData) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*KeyValue, 0, size)
	p.KeyValueMetadata = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &KeyValue{}
		if err := _elem2.read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.KeyValueMetadata = append(p.KeyValueMetadata, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ColumnMetaData) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.DataPageOffset = v
	}
	return nil
}

func (p *ColumnMetaData) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.IndexPageOffset = &v
	}
	return nil
}

func (p *ColumnMetaData) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.DictionaryPageOffset = &v
	}
	return nil
}

func (p *ColumnMetaData) readField12(iprot thrift.TProtocol) error {
	p.Statistics = &Statistics{}
	if err := p.Statistics.read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Statistics), err)
	}
	return nil
}

func (p *ColumnMetaData) readField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*PageEncodingStats, 0, size)
	p.EncodingStats = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &PageEncodingStats{}
		if err := _elem3.read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.EncodingStats = append(p.EncodingStats, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ColumnMetaData) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnMetaData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ColumnMetaData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *ColumnMetaData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("encodings", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encodings: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Encodings)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Encodings {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encodings: ", p), err)
	}
	return err
}

func (p *ColumnMetaData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("path_in_schema", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:path_in_schema: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.PathInSchema)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.PathInSchema {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:path_in_schema: ", p), err)
	}
	return err
}

func (p *ColumnMetaData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("codec", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:codec: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Codec)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.codec (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:codec: ", p), err)
	}
	return err
}

func (p *ColumnMetaData) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_values", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_values: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumValues)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_values (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_values: ", p), err)
	}
	return err
}

func (p *ColumnMetaData) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_uncompressed_size", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:total_uncompressed_size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalUncompressedSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_uncompressed_size (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:total_uncompressed_size: ", p), err)
	}
	return err
}

func (p *ColumnMetaData) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_compressed_size", thrift.I64, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:total_compressed_size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalCompressedSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_compressed_size (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:total_compressed_size: ", p), err)
	}
	return err
}

func (p *ColumnMetaData) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyValueMetadata() {
		if err := oprot.WriteFieldBegin("key_value_metadata", thrift.LIST, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:key_value_metadata: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.KeyValueMetadata)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.KeyValueMetadata {
			if err := v.write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:key_value_metadata: ", p), err)
		}
	}
	return err
}

func (p *ColumnMetaData) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data_page_offset", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:data_page_offset: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.DataPageOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.data_page_offset (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:data_page_offset: ", p), err)
	}
	return err
}

func (p *ColumnMetaData) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndexPageOffset() {
		if err := oprot.WriteFieldBegin("index_page_offset", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:index_page_offset: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.IndexPageOffset)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.index_page_offset (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:index_page_offset: ", p), err)
		}
	}
	return err
}

func (p *ColumnMetaData) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDictionaryPageOffset() {
		if err := oprot.WriteFieldBegin("dictionary_page_offset", thrift.I64, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:dictionary_page_offset: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.DictionaryPageOffset)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dictionary_page_offset (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:dictionary_page_offset: ", p), err)
		}
	}
	return err
}

func (p *ColumnMetaData) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatistics() {
		if err := oprot.WriteFieldBegin("statistics", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:statistics: ", p), err)
		}
		if err := p.Statistics.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Statistics), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:statistics: ", p), err)
		}
	}
	return err
}

func (p *ColumnMetaData) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetEncodingStats() {
		if err := oprot.WriteFieldBegin("encoding_stats", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:encoding_stats: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EncodingStats)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.EncodingStats {
			if err := v.write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:encoding_stats: ", p), err)
		}
	}
	return err
}

func (p *ColumnMetaData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnMetaData(%+v)", *p)
}

// Attributes:
//  - FilePath: File where column data is stored.  If not set, assumed to be same file as
// metadata.  This path is relative to the current file.
//
//  - FileOffset: Byte offset in file_path to the ColumnMetaData *
//  - MetaData: Column metadata for this chunk. This is the same content as what is at
// file_path/file_offset.  Having it here has it replicated in the file
// metadata.
//
type ColumnChunk struct {
	FilePath   *string         `thrift:"file_path,1" json:"file_path,omitempty"`
	FileOffset int64           `thrift:"file_offset,2,required" json:"file_offset"`
	MetaData   *ColumnMetaData `thrift:"meta_data,3" json:"meta_data,omitempty"`
}

func NewColumnChunk() *ColumnChunk {
	return &ColumnChunk{}
}

var ColumnChunk_FilePath_DEFAULT string

func (p *ColumnChunk) GetFilePath() string {
	if !p.IsSetFilePath() {
		return ColumnChunk_FilePath_DEFAULT
	}
	return *p.FilePath
}

func (p *ColumnChunk) GetFileOffset() int64 {
	return p.FileOffset
}

var ColumnChunk_MetaData_DEFAULT *ColumnMetaData

func (p *ColumnChunk) GetMetaData() *ColumnMetaData {
	if !p.IsSetMetaData() {
		return ColumnChunk_MetaData_DEFAULT
	}
	return p.MetaData
}
func (p *ColumnChunk) IsSetFilePath() bool {
	return p.FilePath != nil
}

func (p *ColumnChunk) IsSetMetaData() bool {
	return p.MetaData != nil
}

func (p *ColumnChunk) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetFileOffset bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetFileOffset = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetFileOffset {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field FileOffset is not set"))
	}
	return nil
}

func (p *ColumnChunk) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FilePath = &v
	}
	return nil
}

func (p *ColumnChunk) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FileOffset = v
	}
	return nil
}

func (p *ColumnChunk) readField3(iprot thrift.TProtocol) error {
	p.MetaData = &ColumnMetaData{}
	if err := p.MetaData.read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MetaData), err)
	}
	return nil
}

func (p *ColumnChunk) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnChunk"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ColumnChunk) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilePath() {
		if err := oprot.WriteFieldBegin("file_path", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:file_path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FilePath)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.file_path (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:file_path: ", p), err)
		}
	}
	return err
}

func (p *ColumnChunk) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("file_offset", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:file_offset: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FileOffset)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.file_offset (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:file_offset: ", p), err)
	}
	return err
}

func (p *ColumnChunk) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaData() {
		if err := oprot.WriteFieldBegin("meta_data", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:meta_data: ", p), err)
		}
		if err := p.MetaData.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MetaData), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:meta_data: ", p), err)
		}
	}
	return err
}

func (p *ColumnChunk) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnChunk(%+v)", *p)
}

// Attributes:
//  - Columns: Metadata for each column chunk in this row group.
// This list must have the same order as the SchemaElement list in FileMetaData.
//
//  - TotalByteSize: Total byte size of all the uncompressed column data in this row group *
//  - NumRows: Number of rows in this row group *
//  - SortingColumns: If set, specifies a sort ordering of the rows in this RowGroup.
// The sorting columns can be a subset of all the columns.
type RowGroup struct {
	Columns        []*ColumnChunk   `thrift:"columns,1,required" json:"columns"`
	TotalByteSize  int64            `thrift:"total_byte_size,2,required" json:"total_byte_size"`
	NumRows        int64            `thrift:"num_rows,3,required" json:"num_rows"`
	SortingColumns []*SortingColumn `thrift:"sorting_columns,4" json:"sorting_columns,omitempty"`
}

func NewRowGroup() *RowGroup {
	return &RowGroup{}
}

func (p *RowGroup) GetColumns() []*ColumnChunk {
	return p.Columns
}

func (p *RowGroup) GetTotalByteSize() int64 {
	return p.TotalByteSize
}

func (p *RowGroup) GetNumRows() int64 {
	return p.NumRows
}

var RowGroup_SortingColumns_DEFAULT []*SortingColumn

func (p *RowGroup) GetSortingColumns() []*SortingColumn {
	return p.SortingColumns
}
func (p *RowGroup) IsSetSortingColumns() bool {
	return p.SortingColumns != nil
}

func (p *RowGroup) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetColumns bool = false
	var issetTotalByteSize bool = false
	var issetNumRows bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetColumns = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetTotalByteSize = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetNumRows = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetColumns {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Columns is not set"))
	}
	if !issetTotalByteSize {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TotalByteSize is not set"))
	}
	if !issetNumRows {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumRows is not set"))
	}
	return nil
}

func (p *RowGroup) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ColumnChunk, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &ColumnChunk{}
		if err := _elem4.read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.Columns = append(p.Columns, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RowGroup) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TotalByteSize = v
	}
	return nil
}

func (p *RowGroup) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumRows = v
	}
	return nil
}

func (p *RowGroup) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SortingColumn, 0, size)
	p.SortingColumns = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &SortingColumn{}
		if err := _elem5.read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.SortingColumns = append(p.SortingColumns, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RowGroup) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RowGroup"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RowGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := v.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:columns: ", p), err)
	}
	return err
}

func (p *RowGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("total_byte_size", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:total_byte_size: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalByteSize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.total_byte_size (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:total_byte_size: ", p), err)
	}
	return err
}

func (p *RowGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_rows", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_rows: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumRows)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_rows (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_rows: ", p), err)
	}
	return err
}

func (p *RowGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortingColumns() {
		if err := oprot.WriteFieldBegin("sorting_columns", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sorting_columns: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SortingColumns)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.SortingColumns {
			if err := v.write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sorting_columns: ", p), err)
		}
	}
	return err
}

func (p *RowGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RowGroup(%+v)", *p)
}

// Description for file metadata
//
// Attributes:
//  - Version: Version of this file *
//  - Schema: Parquet schema for this file.  This schema contains metadata for all the columns.
// The schema is represented as a tree with a single root.  The nodes of the tree
// are flattened to a list by doing a depth-first traversal.
// The column metadata contains the path in the schema for that column which can be
// used to map columns to nodes in the schema.
// The first element is the root *
//  - NumRows: Number of rows in this file *
//  - RowGroups: Row groups in this file *
//  - KeyValueMetadata: Optional key/value metadata *
//  - CreatedBy: String for application that wrote this file.  This should be in the format
// <Application> version <App Version> (build <App Build Hash>).
// e.g. impala version 1.0 (build 6cf94d29b2b7115df4de2c06e2ab4326d721eb55)
//
type FileMetaData struct {
	Version          int32            `thrift:"version,1,required" json:"version"`
	Schema           []*SchemaElement `thrift:"schema,2,required" json:"schema"`
	NumRows          int64            `thrift:"num_rows,3,required" json:"num_rows"`
	RowGroups        []*RowGroup      `thrift:"row_groups,4,required" json:"row_groups"`
	KeyValueMetadata []*KeyValue      `thrift:"key_value_metadata,5" json:"key_value_metadata,omitempty"`
	CreatedBy        *string          `thrift:"created_by,6" json:"created_by,omitempty"`
}

func NewFileMetaData() *FileMetaData {
	return &FileMetaData{}
}

func (p *FileMetaData) GetVersion() int32 {
	return p.Version
}

func (p *FileMetaData) GetSchema() []*SchemaElement {
	return p.Schema
}

func (p *FileMetaData) GetNumRows() int64 {
	return p.NumRows
}

func (p *FileMetaData) GetRowGroups() []*RowGroup {
	return p.RowGroups
}

var FileMetaData_KeyValueMetadata_DEFAULT []*KeyValue

func (p *FileMetaData) GetKeyValueMetadata() []*KeyValue {
	return p.KeyValueMetadata
}

var FileMetaData_CreatedBy_DEFAULT string

func (p *FileMetaData) GetCreatedBy() string {
	if !p.IsSetCreatedBy() {
		return FileMetaData_CreatedBy_DEFAULT
	}
	return *p.CreatedBy
}
func (p *FileMetaData) IsSetKeyValueMetadata() bool {
	return p.KeyValueMetadata != nil
}

func (p *FileMetaData) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *FileMetaData) read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetVersion bool = false
	var issetSchema bool = false
	var issetNumRows bool = false
	var issetRowGroups bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetVersion = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetSchema = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetNumRows = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
			issetRowGroups = true
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetVersion {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"))
	}
	if !issetSchema {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Schema is not set"))
	}
	if !issetNumRows {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumRows is not set"))
	}
	if !issetRowGroups {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RowGroups is not set"))
	}
	return nil
}

func (p *FileMetaData) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *FileMetaData) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SchemaElement, 0, size)
	p.Schema = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &SchemaElement{}
		if err := _elem6.read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Schema = append(p.Schema, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileMetaData) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NumRows = v
	}
	return nil
}

func (p *FileMetaData) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*RowGroup, 0, size)
	p.RowGroups = tSlice
	for i := 0; i < size; i++ {
		_elem7 := &RowGroup{}
		if err := _elem7.read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
		}
		p.RowGroups = append(p.RowGroups, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileMetaData) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*KeyValue, 0, size)
	p.KeyValueMetadata = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &KeyValue{}
		if err := _elem8.read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.KeyValueMetadata = append(p.KeyValueMetadata, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *FileMetaData) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.CreatedBy = &v
	}
	return nil
}

func (p *FileMetaData) write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FileMetaData"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FileMetaData) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err)
	}
	return err
}

func (p *FileMetaData) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("schema", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Schema)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Schema {
		if err := v.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err)
	}
	return err
}

func (p *FileMetaData) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("num_rows", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_rows: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.NumRows)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.num_rows (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_rows: ", p), err)
	}
	return err
}

func (p *FileMetaData) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row_groups", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:row_groups: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RowGroups)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RowGroups {
		if err := v.write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:row_groups: ", p), err)
	}
	return err
}

func (p *FileMetaData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyValueMetadata() {
		if err := oprot.WriteFieldBegin("key_value_metadata", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:key_value_metadata: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.KeyValueMetadata)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.KeyValueMetadata {
			if err := v.write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:key_value_metadata: ", p), err)
		}
	}
	return err
}

func (p *FileMetaData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err := oprot.WriteFieldBegin("created_by", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:created_by: ", p), err)
		}
		if err := oprot.WriteString(string(*p.CreatedBy)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.created_by (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:created_by: ", p), err)
		}
	}
	return err
}

func (p *FileMetaData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileMetaData(%+v)", *p)
}
